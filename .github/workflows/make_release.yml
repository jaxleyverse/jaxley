name: Release Workflow

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, labeled]
  push:
    branches:
      - main

jobs:
  check-release:
    if: contains(github.event.pull_request.labels.*.name, 'release') || contains(github.event.push.labels.*.name, 'release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Check version updates
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin main
          # Check pyproject.toml version
          if ! git diff origin/main...HEAD pyproject.toml | grep -q '^+version'; then
            echo "Error: Version in pyproject.toml must be updated"
            exit 1
          fi
          # Check __version__.py
          if ! git diff origin/main...HEAD jaxley/__version__.py | grep -q '^+__version__'; then
            echo "Error: Version in __version__.py must be updated"
            exit 1
          fi
          # Check CHANGELOG.md
          if ! git diff origin/main...HEAD CHANGELOG.md | grep -q '^+'; then
            echo "Error: CHANGELOG.md must be updated"
            exit 1
          fi

  release:
    if: github.event_name == 'push' && contains(github.event.push.labels.*.name, 'release')
    runs-on: ubuntu-latest
    needs: check-release
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -m1 version pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Build package
        run: python -m build

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

      - name: Extract changelog entry
        id: changelog
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          # Extract the latest changelog entry
          awk "/# $VERSION/,/# [0-9]/" CHANGELOG.md | sed '$d' > release_notes.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          body_path: release_notes.txt
          token: ${{ secrets.GITHUB_TOKEN }}
